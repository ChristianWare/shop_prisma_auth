// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------
// NextAuth + User Models
// -------------------------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -------------------------
// User Model
// -------------------------
model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  shopifyCustomerId String?
  
  // New role field
  role              Role      @default(USER)
  
  // Relations
  accounts  Account[]
  sessions  Session[]
  reviews   Review[]
  orders    Order[]
}

// -------------------------
// Reviews Model
// -------------------------
model Review {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId      String   // e.g. 'gid://Shopify/Product/123'
  rating         Int      // 1â€“5
  comment        String?
  adminResponse  String?
  approved       Boolean  @default(false)
  orderId        String?  // Optional: if linking to a local order

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// -------------------------
// Order Models
// -------------------------
model Order {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id               String   @id @default(cuid())
  orderId          String
  order            Order    @relation(fields: [orderId], references: [id])
  shopifyProductId String   // e.g. 'gid://Shopify/Product/123'
  quantity         Int      @default(1)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}
